-- Create database sylabuddy --
create database sylabuddy;

-- Select the database --
USE syllabuddy;

----------------- User ----------------------------
-- Create Users table --
CREATE TABLE IF NOT EXISTS Users(
    userId int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255),
    password VARCHAR(255),
    userType VARCHAR(255),
    lastName VARCHAR(255),
    firstName VARCHAR(255),
    email VARCHAR(255),
    phoneNumber int,
    registrationDate TIMESTAMP
);

-- Insert into table Users --
INSERT Ignore INTO Users(username, password, userType, lastName, firstName, email, phoneNumber, registrationDate)
VALUES ('johndoe', 'password123', 'students', 'Doe', 'John', 'john.doe@example.com', 1234567890, '2023-10-28 10:23:49'),
    ('nhattruong', 'password123', 'students', 'Nhat', 'Truong', 'nhat.truong@example.com', 1234567880, '2023-10-28 10:23:09')
;

-- View Users tables --
select * from Users;

-- Delete values from table --
DELETE FROM Users
where username = 'johndoe';

-- Delete all values from table --
TRUNCATE TABLE Users;

----------------- University ----------------------------
-- Create University table --
CREATE TABLE IF NOT EXISTS Universities(
    universityID int,
    universityName VARCHAR(255),
    address VARCHAR(255),
    yearEstablished VARCHAR(255),
    ranking int
);

-- Create Professor table --
CREATE TABLE IF NOT EXISTS Professor(
    professorID int,
    userID VARCHAR(255),
    department VARCHAR(255),
    universityID int,
    title VARCHAR(255)
);

-- Create Course_favorite table --
CREATE TABLE IF NOT EXISTS courseFavorite(
    courseFavoriteID int,
    courseID int,
    userID int
);

-- Create Course_grade table --
CREATE TABLE IF NOT EXISTS courseGrade(
    courseGradeID int,
    registrationID int,
    grade int
);

-- Create Course_registered table--
CREATE TABLE IF NOT EXISTS courseGrade(
    courseRegisteredID int,
    courseID int,
    userID int
);

-- Create Course table--
CREATE TABLE IF NOT EXISTS course(
    courseID int,
    courseCode VARCHAR(255),
    courseName VARCHAR(255),
    professorID int,
    universityID int,
    yearTerm VARCHAR(255),
    courseDescription VARCHAR(255)
);

-- Query --
-- On Professor Side --
-- 1. How to get info of the professor --
SELECT email, phoneNumber FROM User 
Where userType = 'Professor' and firstName = 'Nhat' and lastName = 'Truong'

SELECT department,title FROM Professor 
WHERE userId = (SELECT userId FROM User 
                    WHERE firstName = 'Nhat' and lastName = 'Truong')

SELECT universityName FROM Universities
WHERE universityId = (SELECT universityId from Professor 
                        WHERE userId = (SELECT userId FROM User 
                                     WHERE firstName = 'Nhat' and lastName = 'Truong')

-- 2. How to get what course the professor taught --
SELECT courseName, courseCode FROM course
WHERE professorID = (SELECT professorID from Professor
                WHERE userId = (SELECT userId FROM User
                    WHERE firstName = 'Nhat' and lastName = 'Truong')

-- 3. Get all professor in one department --
SELECT firstName, lastName FROM User 
    WHERE userID = (SELECT userID from Professor
        Where department = 'Math')